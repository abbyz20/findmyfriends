<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>FindMyFriend</title>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script><!-- jQuery-->
        <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jquerymobile/1.4.5/jquery.mobile.min.css"><!-- jQuery Mobile-->
        <script src="https://ajax.googleapis.com/ajax/libs/jquerymobile/1.4.5/jquery.mobile.min.js"></script><!-- jQuery Mobile-->
        
        
        <script type="text/javascript">
            var state={}; //Structure qui contient l'état de tous les utilisateurs {myself, viewuser, connectedusers}.
            var position={}; //Structure qui contient ma position {latitude, longitude, cap(angle)}.
            var position1={};  //Structure qui contient la position de l'autre utilisateur {latitude, longitude}
            var lastContactSelected=null; //Nom du "dernier" utilisateur selectionné.
            var radtodeg=180/Math.PI;  //Transformation de radian à degrée.
            
            window.onload = function(){
                /* Description du contenu de la variable globale state.
                state.myself={};    //Structure qui contient mon {login, nom}. 
                state.myself.login = '';
                state.myself.nom = '';
                state.connectedusers= {}; //Structure qui contient l'information des utilisateurs connectées {login,nom,status}
                //  Le status peut être:
                //    0 : pas connecté
                //    1 : juste connecté
                //    2 : cet utilisateur est invité par moi
                //    3 : cet utilisateur m'a invité
                //    4 : cet utilisateur est accepté
                state.viewuser = null; //Variable qui contient l'information de l'autre utilisateur à qui je suis en train de regarder.
                //Si state.viewuser= null: je regarderai ma page d'acueil, 
                //Sinon je regarderai l'ubication de l'autre utilisateur selon le nom choisi.
                */
                //Initialisation de variables.
                position.latitude=0;
                position.longitude=0;
                position.cap=0;
                position1.latitude=0;
                position1.longitude=0;

                //coords: API GPS du navigateur
                //watchPosition() est une méthode qui permet d'identifier la position d'un observateur demandé.
                navigator.geolocation.watchPosition(function(pos){
                    position.latitude=pos.coords.latitude;
                    position.longitude=pos.coords.longitude;
                });
                
                //Deviceorientation c'est une événement qui contient 3 valeurs (alpha, beta, gama).
                //Pour notre cas on aura besoin que d'alpha car alpha représente l’angle de rotation 
                //autour de l’axe Z (l'angle par rapport au Nord).
                window.addEventListener('deviceorientation', function (event){
                    var alpha;
                    //Vérifie les propriètés du système IOS
                    if(event.webkitCompassHeading){
                        alpha = -event.webkitCompassHeading; //Rotation est inversé pour IOS
                    }    
                    //Vérifie les propriètés du système Android
                    else{
                        alpha = event.alpha;
                        if(!window.chrome)
                            alpha = alpha-270;
                    }
                    position.cap = alpha/radtodeg;
                    CompassOrientation(position.cap);  
                });

                //Pour tous les événements, je (le navigateur) reçois les événements.
                var evt = new EventSource('/api/notification');
                 
                //Userschanged est un événement que l'on recoit à chaque modification de statut d'un utilisateur.
                evt.addEventListener('userschanged',function(e){
                    //ATTENTION, data contient juste l'utilisateur qui a changé
                    //ce n'est pas le state complet
                    /*
                    var data= JSON.parse(e.data);
                    console.log("userschanged");
                    console.log(data);
                    if(data.status==0)
                        delete state.connectedusers[data.login];
                    else
                        state.connectedusers[data.login]=data;
                    ShowAllState();
                    */
                    RefreshAll();
                });
                
                //RoomActivated est une événement qu'on appel à chaque activation d'une chambre.
                evt.addEventListener('RoomActivated',function(event){
                    var data= JSON.parse(event.data); //Conversion: Chaîne JSON on un  Objet Java
                    console.log("RoomActivated");
                    console.log(data);
                    state.viewuser=data;
                    ShowAllState();
                    // RefreshAll();
                });
                
                //RoomDeactivated est une événement qu'on appel à chaque désactivation d'une chambre.
                evt.addEventListener('RoomDeactivated',function(event){
                    console.log("RoomDesactivated");
                    state.viewuser=null;
                    ShowAllState();
                });        
    
                //GPSposition est une événement qui donne la position de l'autre utilisateur.
                evt.addEventListener('GPSposition',function(event){
                    var data= JSON.parse(event.data);
                    position1.latitude= data.latitude;
                    position1.longitude= data.longitude;
                    var direction_user2 = cap_calculation(position, position1);
                    ArrowOrientation(direction_user2.cap); 
                    console.log("GPSposition event");
                    Coords(data, direction_user2);
                    console.log(data);
                });
            
                setInterval('sendgpsLocation()',5000);//J'envoie ma position toutes les 5 secondes.  
                setInterval('RefreshAll()',120000);//Rafraîchissement globale de l'état directement pour le serveur chaque 2 minutes// il faut etre sur que l'etat dans le navigateur est la bonne  
                RefreshAll(); //Inialisation de la variable global state donnée par le serveur la première fois.
                // la premiere fois c'est nécessaire pour que le navigateur connaitre toute l'etat
            }   
    
 {#/********************************************   FONCTIONS PAGE D'ACCUEIL  **********************************************/#}    
            
            //Callback par défaut affichant un éventuel message d'erreur (car
            //chaque appel AJAX renvoie null ou un message d'erreur)
            //les "vraies" réponses sont toutes transmises via l'EventSource. 
            function ShowMessage(message){
                if(!message) return;
               // $("#popup2").text(message).popup("open");
                $("#popup2content").text(message);
                $('#popup2').popup("open"); // ouvrir popup2
            }
            //Affiche le menu contextuel lorsqu'on clique sur un contact 
            //(différent en fonction du statut du contact).
            function ShowPopup(name){
                switch(state.connectedusers[name].status){
                    case 0: 
                        $("#inv").show();
                        $("#loc").hide();
                        $("#acc").hide();
                        $("#ign").hide();
                        $("#fin").hide();
                    break;
             
                    case 1: 
                        $("#inv").show();
                        $("#loc").hide();
                        $("#acc").hide();
                        $("#ign").hide();
                        $("#fin").hide();
                    break;
             
                    case 2:
                        $("#inv").hide();
                        $("#loc").hide();
                        $("#acc").hide();
                        $("#ign").hide();
                        $("#fin").hide();
                    break;
             
                    case 3:  
                        $("#inv").hide();
                        $("#loc").hide();
                        $("#acc").show();
                        $("#ign").show();
                        $("#fin").hide();  
                    break;
             
                    case 4:  
                        $("#inv").hide();
                        $("#loc").show();
                        $("#acc").hide();
                        $("#ign").hide();
                        $("#fin").show();
                    break;
                }
                lastContactSelected = name;
                $("#popup").popup("open"); 
            }
            
            //Fonction qui affiche une boîte de dialogue avec l'invitation. 
            function ShowInvitationDialog(name){
                $("#text").text(name);
                lastContactSelected = name;
                $(":mobile-pagecontainer").pagecontainer("change", $("#dialog"));
            }
        
            //Fonction qui ne rafraichit pas seulement la liste des contacts, elle 
            //choisit aussi quelle page doit être affichée en fonction de ce qu'il y a dans state.
            function ShowAllState(){
                var users = $("#users"); 
                var invitation=0;
                users.html('');  
                for (var i in state.connectedusers){
                    var user = state.connectedusers[i];
                    var li=$("<li>");
                    var a=$("<a>",{"onclick":"ShowPopup('"+user.login+"');"});
                    a.text(user.nom);
                    li.append(a);
                    users.append(li);
                    a.removeClass('ui-icon-carat-r');
                    
                    switch(state.connectedusers[i].status){
                        case 0:
                            a.addClass('ui-icon-forbidden');
                        break;
                    
                        case 1:
                            a.addClass('ui-icon-user');
                        break;
                    
                        case 2:
                            a.addClass('ui-icon-action');
                        break;
                    
                        case 3:
                            a.addClass('ui-icon-mail');
                        break;

                        case 4:
                            a.addClass('ui-icon-location');
                        break;
                    }

                    if(state.connectedusers[i].status==3)
                        invitation=i;
                }
                users.listview('refresh');
                
                if(invitation)
                    ShowInvitationDialog(invitation);
                //Affichage de la page qui contient la boussole s'il y a un utilisateur.
                else if(state.viewuser)
                    $(":mobile-pagecontainer").pagecontainer("change", $("#compasspage"));
                else
                    $(":mobile-pagecontainer").pagecontainer("change", $("#account"));
            }
            
            //Fonction qui demande au serveur la totalité de l'état côté client, l'enregistre dans state, puis l'affiche.
            function RefreshAll(){
                $.get("/api/currentstate",{},RefreshAllcallback);
                    return;
                function RefreshAllcallback(data){
                    state=data;
                    ShowAllState();
                }
            }
            
            //Bouton Yes de la boîte de dialogue. 
            //Fonction qui fait une rêquete AJAX au gestionnaire /api/invitationyes et lui envoie le dernier utilisateur selectionné.
            function Yes(){
                $.get("/api/invitationyes",{user: lastContactSelected},ShowMessage);
            }
            
            //Bouton No de la boîte de dialogue. 
            //Fonction qui fait une rêquete AJAX au gestionnaire /api/invitationno et lui envoie le dernier utilisateur selectionné.
            function No(){
                $.get("/api/invitationno",{user: lastContactSelected},ShowMessage);
            }
       
            //Fonction qui fait une rêquete AJAX au gestionnaire /api/invite et lui envoie le dernier utilisateur sélectionné.
            function inviteClicked(){
                $.get("/api/invite",{user: lastContactSelected},ShowMessage);
                $("#popup").popup("close"); //fermer le popup
            }

            //Fonction qui fait une rêquete AJAX au gestionnaire /api/finish et lui envoie le dernier utilisateur sélectionné. 
            function finishClicked(){
                $.get("/api/finish",{user: lastContactSelected},ShowMessage);
                $("#popup").popup("close");
            }
        
            //Fonction qui fait une rêquete AJAX au gestionnaire /api/seelocation et lui envoie le dernier utilisateur sélectionné.
            function locationClicked(){
                $.get("/api/seelocation",{user: lastContactSelected},ShowMessage);
                $("#popup").popup("close");
            }
            
            //Fonction qui fait une rêquete AJAX au gestionnaire /api/exit et lui envoie le dernier utilisateur sélectionné.
            function exitClicked(){
                 $.get("/api/exit",{user: lastContactSelected},ShowMessage);
            }
            
            //Fonction qui fait une rêquete AJAX au gestionnaire /api/invitationyes et lui envoie le dernier utilisateur sélectionné
            function acceptClicked(){
                $.get("/api/invitationyes",{user: lastContactSelected},ShowMessage);
                $("#popup").popup("close");
            }
            
            // Fonction qui fait une rêquete AJAX au gestionnaire /api/innvitationno et lui envoie le dernier utilisateur sélectionné
            function ignoreClicked(){
                $.get("/api/invitationno",{user: lastContactSelected},ShowMessage);
                $("#popup").popup("close");
            }
            
            
{#/********************************************   FONCTIONS PAGE DE GPS  **********************************************/#}  
            
            //Fonction qui est un constructeur pour un vecteur en 3D.
            function Cartesian(x,y,z){
                this.x = x;
                this.y = y;
                this.z = z;
            } 
            
            //Fonction qui convert la latitude/longitude en coordonnées dans le référentiel géocentrique.
            function convertSphericalToCartesian(latlong){
                var earthRadius = 6371000; //rayon en métres
                var lat = (latlong.latitude)/radtodeg; //Changement Degrée --> Radianes
                var lon = (latlong.longitude)/radtodeg;
                var x = earthRadius * Math.cos(lat)*Math.cos(lon);
                var y = earthRadius * Math.cos(lat)*Math.sin(lon);
                var z = earthRadius * Math.sin(lat);
                return new Cartesian(x,y,z);
            }
            
            //Fonction qui donne la norme d'un vecteur.
            function vectorMagnitude(vector){
                return Math.sqrt(Math.pow(vector.x,2) + Math.pow(vector.y,2) + Math.pow(vector.z,2));
            }
            
            //Fonction qui permet d'obtenir le vecteur normalizé d'un vecteur quelconque.
            function normalizing(vector){
                var x = vector.x/vectorMagnitude(vector);
                var y = vector.y/vectorMagnitude(vector);
                var z = vector.z/vectorMagnitude(vector);
                return new Cartesian(x,y,z);
            }
            
            //Fonction qui donne le résultat d'un produit scalaire entre deux vecteurs.
            function scalarProduct(vector1, vector2){
                return vector1.x*vector2.x + vector1.y*vector2.y + vector1.z*vector2.z;
            }
            
            //Fonction qui donne le résultat d'un produit vectoriel entre deux vecteurs.
            function vectorProduct(vector1, vector2){
                var x = vector1.y*vector2.z - vector1.z*vector2.y;
                var y = vector1.z*vector2.x - vector1.x*vector2.z;
                var z = vector1.x*vector2.y - vector1.y*vector2.x;
                return new Cartesian(x,y,z);
            }
            
            //Fonction qui donne le résultat d'un produit entre un vecteur et une constante.
            function constantProduct(vector, constant){
                return new Cartesian(constant*vector.x, constant*vector.y, constant*vector.z);
            }
            
            //Fonction qui donne le résultat de la soustraction entre deux vecteurs.
            function vectorSubstraction(vector1, vector2){
                return new Cartesian(vector1.x-vector2.x, vector1.y-vector2.y, vector1.z-vector2.z);
            }
            
            //Fonction qui prend les positions de deux utilisateurs et donne la distance et l'angle entre eux, 
            //en utilisant comme repère ma position. 
            function cap_calculation(position, position1){
                var arr_myself = convertSphericalToCartesian(position); //position du user1
                var ref_point = arr_myself;
                var k = new Cartesian(0,0,1); //vecteur unitaire (perpendiculaire à z) 
                //Vecteur unitaire (w,u,v) du vecteur ref_point
                var w = normalizing(constantProduct(ref_point, -1));
                var u = normalizing(vectorSubstraction(k, constantProduct(w, scalarProduct(k, w))));
                var v = normalizing(vectorProduct(w, u));
                
                var arr_user2 = convertSphericalToCartesian(position1); //position du user2
                var offset = vectorSubstraction(arr_user2, ref_point);
                //Nouvelle position du user2 d'après le point de vue du user1.
                var result = new Cartesian(scalarProduct(offset,u), scalarProduct(offset,v), scalarProduct(offset,w));
                var distance = vectorMagnitude(result);
                var cap = 2 * Math.atan(result.y/ (result.x + Math.sqrt(Math.pow(result.x,2) + Math.pow(result.y,2)))); //angle en Radianes
                return {cap: cap, distance: distance}; 
            }
            
            //Fonction qui fait une requête AJAX pour envoyer ma position au serveur.
            function sendgpsLocation(){
                $.get("/api/position",{latitude:position.latitude,longitude:position.longitude},ShowMessage);
            } 
            
            //Fonction qui affiche la latitude et la longitude de chaque utilisateur; et l'angle et la distance qui les sépares.
            //Aussi envoie les positions des deux utilisateurs à googlemap pour afficher ses positions exacte sur la carte.
            function Coords(data, direction_user2){
                position1.latitude= data.latitude;
                position1.longitude= data.longitude;
                $("#user1").text("User2:"+state.viewuser);
                $("#hiscoordinates").text("Latitude_user2:"+position1.latitude+", Longitude_user2:"+position1.longitude);
                $("#user2").text("Me:"+state.myself.login);
                $("#mycoordinates").text("My_latitude:"+position.latitude+",My_longitude:"+position.longitude);
                $("#distance").text("Distance:"+direction_user2.distance);
                $("#angle").text("Angle:"+direction_user2.cap);
                //.attribute de href pour ouvrir une autre page qui affiche les positions de deux utilisateurs.
                $("#map").attr({href:"https://www.google.fr/maps/dir/"+position1.latitude+","+position1.longitude+"/"+position.latitude+","+position.longitude});
            }
            
            //Fonction qui permet de changer l'orientation de la boussole en fonction de l'angle donné.
            function CompassOrientation(angle){
                var angle_deg= angle*radtodeg;
                $("#compass").css('-moz-transform', 'rotate(' + angle_deg + 'deg)');
                $("#compass").css('-webkit-transform', 'rotate(' + angle_deg + 'deg)');
                $("#compass").css('-o-transform', 'rotate(' + angle_deg + 'deg)');
                $("#compass").css('-ms-transform', 'rotate(' + angle_deg + 'deg)');
            }
             
            //Fonction qui permet de changer l'orientation de la fléche en fonction de l'angle donné.
            function ArrowOrientation(angle){
                var angle_deg= angle*radtodeg;
                $("#arrow").css('-moz-transform', 'rotate(' + angle_deg + 'deg)');
                $("#arrow").css('-webkit-transform', 'rotate(' + angle_deg + 'deg)');
                $("#arrow").css('-o-transform', 'rotate(' + angle_deg + 'deg)');
                $("#arrow").css('-ms-transform', 'rotate(' + angle_deg + 'deg)');
            }
            
        </script>
    </head>
    
    <body>
        <!-- Page de Acueil --> 
        <div  data-role="page" id="account">
            <p><h1>Welcome to your account: {{ login }}</h1></p>
            <div data-role="collapsible">
                <h2>Contacts</h2>
                <ul id= "users" data-role="listview"></ul>
            </div>
            
            <div data-role="popup" id="popup" data-theme="b">
                <ul data-role="listview">
                    <li id="inv"><a onclick="inviteClicked()" data-role="button">Invite</a></li>
                    <li id="loc"><a href="#location" onclick="locationClicked()" data-role="button">See Location</a></li>
                    <li id="acc"><a onclick="acceptClicked()" data-role="button">Accept</a></li>
                    <li id="fin"><a onclick="finishClicked()" data-role="button">Finish</a></li>
                    <li id="ign"><a onclick="ignoreClicked()" data-role="button">Ignore</a></li>
                </ul>
            </div>
           
            <p><a href="/logout" data-ajax="false" rel="external">logout</a></p>
            
            <div data-role="popup" id="popup2" data-theme="b">
               <div id="popup2content"></div>
               <a onclick="RefreshAll()">OK</a>
            </div>
        
        </div>
        
        <!-- Boîte de Dialogue -->   
        <div  data-role="page" data-dialog="true" id="dialog">
            <div data-role="header">
                <h2>Invitation</h2>
            </div>
            <div class="ui-content" role="main">
                <div><span id="text"></span> will like to find you!</div>
                <div class="ui-grid-a">
                    <div class="ui-block-a">
                        <a a onclick="Yes()" class="ui-btn ui-btn-b ui-shadow ui-corner-all" data-role="button">Yes</a>
                    </div>
                    <div class="ui-block-b">
                        <a a onclick="No()" class="ui-btn ui-shadow ui-corner-all" data-role="button">No</a>
                    </div>
                </div>
            </div>
        </div>
       
        <!-- See location, page GPS -->     
        <div data-role="page" id="compasspage">
            <style>
            #compass{
                background:url("img/boussole.png") no-repeat center center transparent;
                background-size:100% 100%;
                position:absolute;
                width:100%;
                height:100%;
                -webkit-transform-origin: 50% 50%;  /* Chrome, Safari */
                -moz-transform-origin: 50% 50%;     /* Firefox */
                -o-transform-origin: 50% 50%;     /*Opera */
                transform-origin: 50% 50%;          /* Someday... */
            }
            
            #arrow{
                background:url("img/fleche.png") no-repeat center center;
                width:100%;
                height:100%;
                background-size:50% 50%;
                -webkit-transform-origin: 50% 50%;  /* Chrome, Safari */
                -moz-transform-origin: 50% 50%;     /* Firefox */
                -o-transform-origin: 50% 50%;     /*Oopera */
                transform-origin: 50% 50%;          /* Someday... */
            }
            
            #position_absolute{
                position:absolute; 
                width:100%;
                height:100%;
            }
            
            #exit{ 
                float: right;
            }
            
            #map{
                float: right;  
            }
            
            </style>

            <div id="position_absolute">
                <div id="user1"></div>
                <div id="hiscoordinates"></div>
                <div id="user2"></div>
                <div id="mycoordinates"></div>
                <div id="angle"></div>
                <div id="distance"></div>
                <div id="compass">
                    <div id="arrow"></div>
                </div>
                <a onclick="exitClicked()" data-role="button" id = "exit">EXIT</a>
                <a data-role="button" id = "map" data-ajax="false" rel="external" target="_blank">See Map</a>
                <!--target="_blank" pour ouvrir une nouvelle page-->
            </div>
        </div>

        <!-- Finish  -->     
        <div data-role="page" id="finish">
            <div data-rel="dialogue">
                <p>Are you sure you want to end this session?</p>
                <input type="submit" id="finish" value="Yes">
                <a href="#account" data-role="button">No</a>
            </div>
        </div>
    </body>
</html>